Getting Started
===============

While the calculations and outputs generated by SideEye can be customized, SideEye can be used easily without additional configuration. After installing SideEye, open a new .py file. Save this file in a directory containing a region file and a directory of .DA1 files. Any files in the DA1 directory that do not end in ``.DA1`` or ``.da1`` will be ignored. The directory structure should look like this:

::

  project_dir
  │   sample_script.py
  │   region_file.cnt
  │   config.json (optional)
  │
  └───DA1_files
  │   │   file1.da1
  │   │   file2.da1
  │   │   file3.da1

To parse experiment data, a configuration file specifying the region file and .DA1 file formats is needed. See :doc:`The Configuration File <configFile>` for a full explanation. Each line of a region or .DA1 file contains several fields. The locations of these fields within a line can vary with the software that was used to generate the file, so it is important that the configuration file accurately describes the file format. The position of each field in the file format is described in the configuration file with an integer, where `0` is the first field in a line.

.DA1 File Formats
~~~~~~~~~~~~~~~~~

A .DA1 file describes the position and timing of fixations. Each line of the file represents a single trial in an experiment. The first fields in the line contain information identifying the trial. After these fields, fixations are represented by groups of four numbers - x-position, y-position, start time, and end time. Five fields are necessary for parsing a .DA1 file:

``index``: An integer identifying a single trial, usually the first number in the line.

``condition``: A value identifying the condition of the trial.

``number``: A value identifying the item of the trial.

``time``: The total time of a trial, sometimes either not included in DA1 files or at the end of every line. If this is true, this parameter should be ``-1``.

``fixation_start``: The position in a line where fixation data starts.

The default configuration for .DA1 files is:

::

  "da1_fields" : {
    "index": 0,
    "condition": 1,
    "number": 2,
    "time": -1,
    "fixation_start": 8
  }

This default configuration matches a .DA1 file with the following format:

::

  Position:   0   |   1   |   2   | 3 | 4 | 5 | 6 | 7 |   8   |   9   | ... |  -1  |
  ----------------------------------------------------------------------------------
  Value:    index | cond. | num.  |   |   |   |   |   | fix.  | fix.  | ... | time |

If your .DA1 files do not match this format, copy :doc:`default_config.json <default_config.json>` into a new file in the same directory, and edit the ``da1_fields`` section to match your .DA1 file format.

Region File Formats
~~~~~~~~~~~~~~~~~~~

Region files (typically .cnt or .reg) describe regions of interest in items of the experiment. Regions are defined by a character position of the beginning and ending of the region. Character positions can either be a single integer for single-line items, or a pair (line, character) of integers for multi-line items. A line in a region file contains the number and condition of an item, followed by the beginning and end positions of the regions. Four fields are necessary for parsing a region file.

``number``: Item identifier.

``condition``: Item condition.

``boundaries_start``: The position where region boundaries start in a line.

``includes_y``: True for multi-line items where regions are bounded by character and line position pairs, false for single-line items where regions are bounded by single integer character positions.

The default configuration for region files is:

::

  "region_fields": {
    "number": 0,
    "condition": 1,
    "boundaries_start": 3,
    "includes_y": false
  }

The default configuration matches a region file with the following format:

::

  Position:   0   |   1   | 2 |   3   |   4   |   5   |   6   | ... |
  -------------------------------------------------------------------
  Value:    num.  | cond. |   |  r1   |  r1   |  r2   |  r2   | ... |

If your region file does not match this format, copy :doc:`default_config.json <default_config.json>` into a new file in the same directory, and edit the ``region_fields`` section to match your region file format.

Parsing The Experiment
~~~~~~~~~~~~~~~~~~~~~~

After editing your configuration file, go back to the new python script. Copy the following Python code into the file, and change `project_dir`, `DA1_files`, `region_file.cnt`, and `config.json` to match your file and directory names. `output.csv`, the output file, can also be renamed.

.. code-block:: python

  # Import modules.
  import sideeye
  import os

  # Get directory path.
  dirname = os.path.dirname(os.path.realpath(__file__))

  # Get config file path.
  config = os.path.join(dirname, 'config.json')

  # Parse all DA1 files in directory using items listed in region file.
  experiments = sideeye.parser.experiment.parse_dir(os.path.join(dirname, 'DA1_files'), os.path.join(dirname, 'region_file.cnt'), config)

  # Calculate all measures listed in config file, and output results as a csv.
  sideeye.calculate_all_measures(experiments, 'output.csv', config)


If you did not have to modify the configuration file, the following script can be used instead. It will use the default configuration file:

.. code-block:: python

  # Import modules.
  import sideeye
  import os

  # Get directory path.
  dirname = os.path.dirname(os.path.realpath(__file__))

  # Parse all DA1 files in directory using items listed in region file.
  experiments = sideeye.parser.experiment.parse_dir(os.path.join(dirname, 'DA1_files'), os.path.join(dirname, 'region_file.cnt'))

  # Calculate all measures listed in config file, and output results as a csv.
  sideeye.calculate_all_measures(experiments, 'output.csv')

Save and run the script. That's it! All measures for all regions and trials should be included in the output file. If you want to configure measure or fixation cutoffs, or the output file, see :doc:`The Configuration File <configFile>`.

The Output File
~~~~~~~~~~~~~~~

This example script will produce a csv output file where the first line contains the column headers, and each of the following lines contains information about a single measure for a single trial or region. This format can easily be read with R, Python, or any other statistical software packages.
